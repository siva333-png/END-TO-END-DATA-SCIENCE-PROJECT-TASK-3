# This is a full-stack data science project.
# It covers data collection, preprocessing, model training, and deployment with a Flask web app.

# --- Step 1: Data Collection & Preprocessing ---
# We will use the built-in Boston house price dataset for simplicity.
# In a real-world scenario, you would load data from a CSV, database, or API.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import pickle

# Load the dataset. Note: The Boston dataset is deprecated due to ethical concerns,
# but it is used here as a simple, illustrative example.
# A more modern project would use a different dataset.
try:
    from sklearn.datasets import fetch_california_housing
    housing = fetch_california_housing()
    data = pd.DataFrame(housing.data, columns=housing.feature_names)
    data['target'] = housing.target
    print("Using California Housing dataset.")
except ImportError:
    print("California Housing dataset not found. Using a dummy dataset.")
    # Create a dummy dataset if the real one isn't available
    from sklearn.datasets import make_regression
    X, y = make_regression(n_samples=500, n_features=13, noise=10, random_state=42)
    data = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(13)])
    data['target'] = y

print("\n--- Data Preprocessing ---")
print("First 5 rows of the dataset:")
print(data.head())
print("\nDataset Info:")
print(data.info())
print("\nChecking for missing values:")
print(data.isnull().sum())

# No further preprocessing is needed for this clean dataset, but in a real project,
# you would handle missing values, encode categorical variables, and scale numerical features.

# --- Step 2: Model Training ---
print("\n--- Model Training ---")

# Separate features (X) and target (y)
X = data.drop('target', axis=1)
y = data['target']

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (RÂ²): {r2:.2f}")

# Save the trained model to a file using pickle
model_filename = 'house_price_model.pkl'
with open(model_filename, 'wb') as file:
    pickle.dump(model, file)
print(f"Model saved as '{model_filename}'")
print("-" * 50)


# --- Step 3: API Deployment with Flask ---
# The following code is for the Flask application.
# Save this part as a separate file, e.g., 'app.py'
# and run `python app.py` from your terminal.

# Before running, make sure you have Flask and scikit-learn installed:
# pip install Flask scikit-learn pandas

from flask import Flask, request, jsonify, render_template
import os

# Create the Flask application instance
app = Flask(__name__)

# Load the trained model
model_path = 'house_price_model.pkl'
if os.path.exists(model_path):
    with open(model_path, 'rb') as file:
        loaded_model = pickle.load(file)
    print(f"Loaded model from '{model_path}'")
else:
    print(f"Error: '{model_path}' not found. Please run the training script first.")
    loaded_model = None

# Create a sample HTML file for the web interface
# In a real project, you would have this as a separate file in a 'templates' folder.
html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>House Price Predictor</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-lg">
        <h1 class="text-3xl font-bold text-center mb-6">Predict House Price</h1>
        <form id="predictionForm" class="space-y-4">
            <div class="flex flex-col">
                <label for="feature_0" class="text-gray-700">MedInc (Median Income):</label>
                <input type="number" step="0.01" id="feature_0" name="feature_0" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="flex flex-col">
                <label for="feature_1" class="text-gray-700">HouseAge:</label>
                <input type="number" step="0.01" id="feature_1" name="feature_1" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="flex flex-col">
                <label for="feature_2" class="text-gray-700">AveRooms:</label>
                <input type="number" step="0.01" id="feature_2" name="feature_2" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="flex flex-col">
                <label for="feature_3" class="text-gray-700">AveBedrms:</label>
                <input type="number" step="0.01" id="feature_3" name="feature_3" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="flex flex-col">
                <label for="feature_4" class="text-gray-700">Population:</label>
                <input type="number" step="0.01" id="feature_4" name="feature_4" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="flex flex-col">
                <label for="feature_5" class="text-gray-700">AveOccup:</label>
                <input type="number" step="0.01" id="feature_5" name="feature_5" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="flex flex-col">
                <label for="feature_6" class="text-gray-700">Latitude:</label>
                <input type="number" step="0.01" id="feature_6" name="feature_6" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="flex flex-col">
                <label for="feature_7" class="text-gray-700">Longitude:</label>
                <input type="number" step="0.01" id="feature_7" name="feature_7" class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <button type="submit" class="w-full bg-blue-600 text-white p-3 rounded-md font-semibold hover:bg-blue-700 transition-colors">Predict Price</button>
        </form>
        <div id="predictionResult" class="mt-6 text-center text-xl font-bold"></div>
    </div>

    <script>
        document.getElementById('predictionForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const form = event.target;
            const data = {};
            // Gather all input values from the form
            for (let i = 0; i < form.elements.length; i++) {
                const element = form.elements[i];
                if (element.tagName === 'INPUT' && element.name) {
                    data[element.name] = parseFloat(element.value);
                }
            }

            fetch('/predict', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })
            .then(response => response.json())
            .then(result => {
                const resultDiv = document.getElementById('predictionResult');
                if (result.prediction) {
                    resultDiv.textContent = 'Predicted Price: $' + result.prediction.toFixed(2);
                    resultDiv.className = 'mt-6 text-center text-2xl font-bold text-green-600';
                } else {
                    resultDiv.textContent = 'Error: ' + result.error;
                    resultDiv.className = 'mt-6 text-center text-2xl font-bold text-red-600';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('predictionResult').textContent = 'An error occurred while fetching the prediction.';
            });
        });
    </script>
</body>
</html>
"""

# Route for the home page (the web app)
@app.route('/')
def home():
    # Render the HTML directly
    return html_content

# API endpoint for predictions
@app.route('/predict', methods=['POST'])
def predict():
    if not loaded_model:
        return jsonify({'error': 'Model not loaded. Please train the model first.'}), 500

    try:
        # Get data from the POST request
        input_data = request.get_json()
        print(f"Received input data: {input_data}")

        # Extract features in the correct order
        # Make sure the keys match the feature names used during training
        features = [
            input_data['feature_0'],  # MedInc
            input_data['feature_1'],  # HouseAge
            input_data['feature_2'],  # AveRooms
            input_data['feature_3'],  # AveBedrms
            input_data['feature_4'],  # Population
            input_data['feature_5'],  # AveOccup
            input_data['feature_6'],  # Latitude
            input_data['feature_7']   # Longitude
        ]

        # Convert to numpy array for the model
        features_np = np.array(features).reshape(1, -1)

        # Make prediction
        prediction = loaded_model.predict(features_np)[0]

        # Return the prediction as a JSON response
        return jsonify({'prediction': prediction})

    except KeyError as e:
        return jsonify({'error': f"Missing key in request data: {e}"}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    # This part is for local development only
    # For production, you would use a dedicated web server like Gunicorn
    app.run(debug=True)

# MWE OUTPUT:
# To see the MWE output, follow these steps:
# 1. Run the first part of the script (Step 1 & 2) to train the model and save `house_price_model.pkl`.
# 2. Save the second part of the script (Step 3) as `app.py`.
# 3. Open a terminal, navigate to the directory, and run `python app.py`.
# 4. Open your web browser and go to `http://127.0.0.1:5000/`. You will see the web form.
# 5. Enter values and click 'Predict Price' to see the model's output in the web app.
# 6. You can also test the API directly using cURL:
#    curl -X POST -H "Content-Type: application/json" -d "{\"feature_0\": 8.3252, \"feature_1\": 41.0, \"feature_2\": 6.98412698, \"feature_3\": 1.02380952, \"feature_4\": 322.0, \"feature_5\": 2.55555556, \"feature_6\": 37.88, \"feature_7\": -122.23}" http://127.0.0.1:5000/predict
# The API will respond with JSON like: {"prediction": 4.526233488730999}
